name: Github runner
on:
  push:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  release:
    types: [published]
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-15, macos-15-intel, windows-2025]
    steps:
      - uses: actions/checkout@v3
        with:
          clean: false
      - name: Set up JDK 11
        if: matrix.os != 'windows-2025'
        uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: "11"
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.28.3
          ninjaVersion: 1.12.1
      - name: Restore vcpkg cache
        uses: actions/cache@v4
        id: vcpkg-cache
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/build/vcpkg_installed
            !${{ github.workspace }}/vcpkg/.git
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: vcpkg-${{ hashFiles( 'vcpkg.json' ) }}-${{ hashFiles( 'vcpkg-configuration.json' ) }}-${{ runner.os }}-${{ runner.arch }}-cache-key-v1
      - name: Set up Node.js 20
        if: matrix.os != 'windows-2025'
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install linux dependencies
        if: matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          sudo apt update
          sudo apt install -y lcov wget python3-dev python3-pip git curl zip unzip tar
          sudo apt install -y --no-install-recommends \
              clang make build-essential libssl-dev zlib1g-dev ca-certificates mold autoconf \
              flex bison patch libzstd-dev ninja-build pkg-config uuid-runtime automake gcc-14 g++-14
      - name: Install macOS dependencies
        if: matrix.os == 'macos-15' || matrix.os == 'macos-15-intel'
        run: brew install libomp autoconf automake libtool
      - name: Add MSbuild to PATH
        if: matrix.os == 'windows-2025'
        uses: microsoft/setup-msbuild@v1.1
      - uses: actions-rs/toolchain@v1
        if: matrix.os != 'windows-2025'
        with:
          toolchain: nightly-2024-02-25
          override: true
      - name: Compute build flags
        if: matrix.os != 'windows-2025'
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            echo "EXTRA_FLAGS=-DSTATIC_BUILD=ON" >> "$GITHUB_ENV"
          else
            echo "EXTRA_FLAGS=" >> "$GITHUB_ENV"
          fi
      - name: Configure for linux
        if: matrix.os == 'ubuntu-24.04'
        run: |
          mkdir -p build
          cd build
          CC=gcc-14 CXX=g++-14 cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DLINKER=mold -DTESTS=ON -DCOVERAGE=OFF -DWITH_LIGHTNODE=ON -DWITH_CPPSDK=ON -DWITH_TIKV=OFF -DWITH_WASM=OFF -DWITH_TARS_SERVICES=OFF -DTOOL=OFF -DVCPKG_TARGET_TRIPLET=x64-linux-release ${EXTRA_FLAGS} ..
      - name: Configure for linux arm
        if: matrix.os == 'ubuntu-24.04-arm'
        run: |
          mkdir -p build
          cd build
          CC=gcc-14 CXX=g++-14 cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DLINKER=mold -DTESTS=ON -DCOVERAGE=OFF -DWITH_LIGHTNODE=ON -DWITH_CPPSDK=ON -DWITH_TIKV=OFF -DWITH_WASM=OFF -DWITH_TARS_SERVICES=OFF -DTOOL=OFF -DVCPKG_TARGET_TRIPLET=arm64-linux-release ${EXTRA_FLAGS} ..
      - name: Configure for macOS
        if: matrix.os == 'macos-15'
        run: |
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          mkdir -p build
          cd build
          CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DTESTS=ON -DCOVERAGE=OFF -DWITH_LIGHTNODE=ON -DWITH_CPPSDK=ON -DWITH_TIKV=OFF -DWITH_WASM=OFF -DWITH_TARS_SERVICES=OFF -DTOOL=OFF -DVCPKG_TARGET_TRIPLET=arm64-osx-release ${EXTRA_FLAGS} ..
      - name: Configure for macOS (Intel)
        if: matrix.os == 'macos-15-intel'
        run: |
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          mkdir -p build
          cd build
          CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DTESTS=ON -DCOVERAGE=OFF -DWITH_LIGHTNODE=ON -DWITH_CPPSDK=ON -DWITH_TIKV=OFF -DWITH_WASM=OFF -DWITH_TARS_SERVICES=OFF -DTOOL=OFF -DVCPKG_TARGET_TRIPLET=x64-osx-release ${EXTRA_FLAGS} ..
      - name: Configure for windows
        if: matrix.os == 'windows-2025'
        run: |
          mkdir build -Force
          cd build
          cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DALLOCATOR=default -DTESTS=OFF -DFULLNODE=OFF -DWITH_LIGHTNODE=OFF -DWITH_TARS_SERVICES=OFF -DWITH_CPPSDK=ON -DWITH_WASM=OFF -DWITH_TIKV=OFF -DTOOL=OFF -DVCPKG_TARGET_TRIPLET=x64-windows-static-release ..
      - name: Build
        run: |
          cd build
          cmake --build . --parallel 3
      - name: Test
        if: matrix.os != 'windows-2025'
        run: |
          cd build
          CTEST_OUTPUT_ON_FAILURE=TRUE ctest -j3
      # - name: Upload coverage report
      #   if: matrix.os == 'ubuntu-24.04'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: build/coverage.info
      - name: prepare RPCAPI Tests
        if: matrix.os != 'windows-2025'
        run: |
          cd tools
          bash .ci/rpcapi_ci_prepare.sh
      - name: FISCO BCOS RpcApiTest
        if: matrix.os != 'windows-2025'
        uses: matt-ball/newman-action@v1.0.4
        with:
          collection: https://raw.githubusercontent.com/FISCO-BCOS/FISCOBCOS-RPC-API/main/fiscobcos.rpcapi.collection.json
      - name: Integration test - Air
        if: matrix.os != 'windows-2025' && matrix.os != 'macos-15'
        run: |
          cd tools
          bash .ci/ci_check_air.sh ${{ github.base_ref }} "true"
      - name: Set packaging variables
        if: github.event_name == 'release' && matrix.os != 'windows-2025'
        id: pkgvars
        shell: bash
        run: |
          set -euo pipefail
          case "${{ matrix.os }}" in
            ubuntu-24.04)
              echo "PKG_OS=linux" >> $GITHUB_ENV
              echo "PKG_ARCH=x86_64" >> $GITHUB_ENV
              ;;
            ubuntu-24.04-arm)
              echo "PKG_OS=linux" >> $GITHUB_ENV
              echo "PKG_ARCH=aarch64" >> $GITHUB_ENV
              ;;
            macos-15)
              echo "PKG_OS=macOS" >> $GITHUB_ENV
              echo "PKG_ARCH=arm64" >> $GITHUB_ENV
              ;;
            macos-15-intel)
              echo "PKG_OS=macOS" >> $GITHUB_ENV
              echo "PKG_ARCH=x86_64" >> $GITHUB_ENV
              ;;
            *) ;;
          esac
          echo "PKG_NAME=fisco-bcos-${PKG_OS:-unknown}-${PKG_ARCH:-unknown}.tar.gz" >> $GITHUB_ENV
          # also expose as step outputs for later reference
          echo "pkg_name=fisco-bcos-${PKG_OS:-unknown}-${PKG_ARCH:-unknown}.tar.gz" >> $GITHUB_OUTPUT
      - name: Create release tarball
        if: github.event_name == 'release' && matrix.os != 'windows-2025'
        shell: bash
        run: |
          set -euo pipefail
          BIN_PATH="build/fisco-bcos-air/fisco-bcos"
          if [[ ! -f "$BIN_PATH" ]]; then
            echo "Binary not found at $BIN_PATH" >&2
            ls -la build || true
            exit 1
          fi
          # Create tar.gz in repo root with only the binary inside (no extra folders)
          tar -C "$(dirname "$BIN_PATH")" -czf "${PKG_NAME}" "$(basename "$BIN_PATH")"
      - name: Upload assets to GitHub Release
        if: github.event_name == 'release' && matrix.os != 'windows-2025'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.pkgvars.outputs.pkg_name }}